// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider                  = "prisma-erd-generator"
  theme                     = "forest"
  output                    = "ERD.md"
  includeRelationFromFields = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  User
  Admin
}

enum subsidyStatus {
  Abolition
  Continuation
}

enum informationImportance {
  High
  Middle
  Low
}

enum answerType {
  BOOLEAN
  NUMBER
  CHOICE
}

// お知らせ
model Information {
  id         Int                   @id @default(autoincrement())
  title      String
  body       String
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  importance informationImportance @default(Low)
  authorId   Int
  author     User                  @relation(fields: [authorId], references: [id])
}

// ユーザー
model User {
  id             Int           @id @default(autoincrement())
  email          String        @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  hashedPassword String
  answers        Answer[]
  role           Role          @default(User)
  information    Information[]
}

// 市町区村
model Municipality {
  id                  Int        @id @default(autoincrement())
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  name                String     @unique
  municipalSymbolPath String
  isSupported         Boolean    @default(false)
  prefectureId        Int
  prefecture          Prefecture @relation(fields: [prefectureId], references: [id])
  subsidies           Subsidy[]
}

// 都道府県
model Prefecture {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  name           String         @unique
  municipalities Municipality[]
}

// 助成金
model Subsidy {
  id                           Int                           @id @default(autoincrement())
  name                         String
  deadlineForReceipt           DateTime? // 受給期限
  amountReceived               String // 受給額
  applicationAddress           String // 申請先
  applicationMethod            String // 申請方法
  description                  String // 説明
  status                       subsidyStatus                 @default(Continuation) // 助成金の更新・廃止などの状態
  relatedLink                  String // 根拠となるリンク
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt
  municipalityId               Int
  municipality                 Municipality                  @relation(fields: [municipalityId], references: [id])
  answers                      Answer[]
  subsidyeligibilityConditions SubsidyEligibilityCondition[]
  subsidyamountConditions      SubsidyAmountCondition[]
  questionGroupId              Int?
  questionGroup                QuestionGroup?                 @relation(fields: [questionGroupId], references: [id])
}

// 一問一答の質問
model Question {
  id                    Int                     @id @default(autoincrement())
  answerType            answerType // YesとNoで答えられる質問か、数値など具体的な回答を要する質問なのか
  text                  String // 質問文
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  propertyName          String                  @unique // クライアントサイドでリクエストに格納される回答のプロパティ
  questionGroupQuestion QuestionGroupQuestion[]
  questionChoice QuestionChoice[] 
}

// 一問一答の質問を複数格納した質問グループ
model QuestionGroup {
  id                   Int                     @id @default(autoincrement())
  description          String
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  questions            QuestionGroupQuestion[]
  subsidies            Subsidy[]
}

// ユーザーの答えを保存するテーブル
model Answer {
  id        Int      @id @default(autoincrement())
  subsidyId Int
  subsidy   Subsidy  @relation(fields: [subsidyId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  answers   Json
}

// 助成金の受給要件テーブル
model SubsidyEligibilityCondition {
  id            Int     @id @default(autoincrement())
  subsidyId     Int     @unique
  subsidy       Subsidy @relation(fields: [subsidyId], references: [id])
  conditionData Json
}

// 助成金の受給金額テーブル
model SubsidyAmountCondition {
  id         Int     @id @default(autoincrement())
  subsidyId  Int     @unique
  subsidy    Subsidy @relation(fields: [subsidyId], references: [id])
  amountData Json
}

// 質問群と質問の中間テーブル
model QuestionGroupQuestion {
  questionId      Int
  question        Question      @relation(fields: [questionId], references: [id])
  questionGroupId Int
  questionGroup   QuestionGroup @relation(fields: [questionGroupId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([questionId, questionGroupId])
}

// 質問の回答の種類として選択肢がある場合に使用される選択肢テーブル
model Choice {
  id          Int      @id @default(autoincrement())
  text        String   // 選択肢として表示される文字列 例: "会社員", "自営業", "無職"
  value       String   // 選択したときの値 例: "salary"
  questionChoice   QuestionChoice[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// 質問テーブルと選択肢テーブルの中間テーブル
model QuestionChoice {
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  choice     Choice   @relation(fields: [choiceId], references: [id])
  choiceId   Int

  @@id([questionId, choiceId])
}